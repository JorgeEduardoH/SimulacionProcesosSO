/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simuladorsistemaoperativo;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Random;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author windows
 */
public class Simulador extends javax.swing.JFrame {

    /**
     * Creates new form Simulador
     */
    //array list de procesos 
    ArrayList<Proceso> listaProcesos =new ArrayList<Proceso>(); // son todos los procesos  
    ArrayList<Proceso> listaProcesoslistos =new ArrayList<Proceso>(); 
    ArrayList<Proceso> listaProcesosbloqueados =new ArrayList<Proceso>();
    ArrayList<Proceso> listaProcesosterminados =new ArrayList<Proceso>();
    ArrayList<String > listapaginasmemoriaprincipal= new ArrayList<>();
    ArrayList<String > listapaginasmemoriavirtual= new ArrayList<>();
   
    
      
    //recursos del sistema     
    ArrayList<Recurso> listarecursosensistema= new ArrayList<Recurso>();
      
    
 
    Proceso procesoenejecucion = new Proceso(); // en ejecucion solo debe haber un proceso por ende no hay lista 
    
   
    
    boolean procesoenejecucionterminado;
    
    
    int maxprocesos=5;
    int maxtamanoproceso=50;
    int reducciontamano=10;
    int tamanoquitado=0;
    
    int marco=5;
    int conjuntoresidente=3;
    //Conjunto residente es el numero de paginas de un proceso que estan alojadas en un marco de memoria principal..
   
    
    
    
    int tiempo =0;
    int tiempollegada=2;
   
    
    int columnas_simulacion;
    int procesoscreados;
   
    
    
    public Simulador() 
    {
        initComponents();
         setIconImage(new ImageIcon(getClass().getResource("/imagenes/IconoApp.png ")).getImage());
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        crearrecursossistema();
    }
    
    public void calcularnumerodepaginas()
    {
        
        
    }
    public void crearrecursossistema()
    {
    //crear los recursos del sistema 
   
          
     listarecursosensistema.add(crearrecurso("TECLADO",true));
     listarecursosensistema.add(crearrecurso("RATON",true));
     listarecursosensistema.add(crearrecurso("MONITOR",true));
     listarecursosensistema.add(crearrecurso("IMPRESORA",true));
     listarecursosensistema.add(crearrecurso("PROCEDIMIENTO",true));
     
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogCrear = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        proceso_nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        proceso_tamano = new javax.swing.JTextField();
        radio_teclado = new javax.swing.JRadioButton();
        radio_raton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        proceso_id = new javax.swing.JTextField();
        radio_monitor = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        radio_impresora = new javax.swing.JRadioButton();
        radio_procedimiento = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        proceso_alias = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        prioridad = new javax.swing.JComboBox<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        framesimulacionPB = new javax.swing.JFrame();
        tituloPB = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablasimulacionPB = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablarecursossistemaPB = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tablamemoriaprincipalPB = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablamemoriavirtualPB = new javax.swing.JTable();
        framesimulacionPA = new javax.swing.JFrame();
        tituloPA = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablasimulacionPA = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        log1 = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablarecursossistemaPA = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tablamemoriaprincipalPA = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        tablamemoriavirtualPA = new javax.swing.JTable();
        principal = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProcesoslistos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        dialogCrear.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialogCrear.setMinimumSize(new java.awt.Dimension(700, 500));

        jLabel1.setText("CREAR PROCESO ");

        jLabel2.setText("Nombre");

        jLabel3.setText("Tama√±o ");

        radio_teclado.setText("TECLADO");

        radio_raton.setText("RATON ");
        radio_raton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_ratonActionPerformed(evt);
            }
        });

        jLabel4.setText("ID");

        proceso_id.setEditable(false);
        proceso_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso_idActionPerformed(evt);
            }
        });

        radio_monitor.setText("MONITOR");

        jLabel5.setText("Recursos ");

        radio_impresora.setText("IMPRESORA");

        radio_procedimiento.setText("PROCEDIMIENTO");
        radio_procedimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_procedimientoActionPerformed(evt);
            }
        });

        jButton1.setText("CREAR PROCESO ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("MB");

        jLabel9.setText("Alias");

        proceso_alias.setEditable(false);
        proceso_alias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso_aliasActionPerformed(evt);
            }
        });

        jLabel14.setText("prioridad");

        prioridad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BAJA", "ALTA" }));

        javax.swing.GroupLayout dialogCrearLayout = new javax.swing.GroupLayout(dialogCrear.getContentPane());
        dialogCrear.getContentPane().setLayout(dialogCrearLayout);
        dialogCrearLayout.setHorizontalGroup(
            dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogCrearLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addGroup(dialogCrearLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogCrearLayout.createSequentialGroup()
                        .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(dialogCrearLayout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(54, 54, 54)
                                    .addComponent(proceso_id, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(446, Short.MAX_VALUE))
                    .addGroup(dialogCrearLayout.createSequentialGroup()
                        .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(dialogCrearLayout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(proceso_alias, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(proceso_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dialogCrearLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prioridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(dialogCrearLayout.createSequentialGroup()
                                            .addComponent(radio_raton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(radio_monitor))
                                        .addComponent(proceso_tamano, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(37, 37, 37)
                        .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dialogCrearLayout.createSequentialGroup()
                                .addComponent(radio_impresora)
                                .addGap(41, 41, 41)
                                .addComponent(radio_procedimiento)))
                        .addGap(0, 174, Short.MAX_VALUE))))
            .addGroup(dialogCrearLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radio_teclado)
                    .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel14)
                        .addComponent(jLabel5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialogCrearLayout.setVerticalGroup(
            dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogCrearLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proceso_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(proceso_alias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(proceso_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(proceso_tamano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(26, 26, 26)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(prioridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(dialogCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_teclado)
                    .addComponent(radio_raton)
                    .addComponent(radio_monitor)
                    .addComponent(radio_impresora)
                    .addComponent(radio_procedimiento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(26, 26, 26))
        );

        framesimulacionPB.setTitle("EJECUCION");
        framesimulacionPB.setLocation(new java.awt.Point(100, 100));
        framesimulacionPB.setExtendedState(MAXIMIZED_BOTH);
        framesimulacionPB.setLocationRelativeTo(null);
        framesimulacionPB.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                framesimulacionPBWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        tituloPB.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        tituloPB.setText("SIMULACION PRIORIDAD BAJA");

        tablasimulacionPB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablasimulacionPB);

        log.setColumns(20);
        log.setRows(5);
        jScrollPane3.setViewportView(log);

        jLabel10.setText("LOG:");

        jLabel11.setText("MEMORIA PRINCIPAL ");

        jLabel12.setText(" MEMORIA VIRTUAL ");

        tablarecursossistemaPB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TECLADO", "RATON", "MONITOR", "IMPRESORA", "PROCEDIMIENTO", "TIEMPO"
            }
        ));
        jScrollPane4.setViewportView(tablarecursossistemaPB);

        jLabel13.setText("Recursos en sistema ");

        tablamemoriaprincipalPB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(tablamemoriaprincipalPB);

        tablamemoriavirtualPB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tablamemoriavirtualPB);

        javax.swing.GroupLayout framesimulacionPBLayout = new javax.swing.GroupLayout(framesimulacionPB.getContentPane());
        framesimulacionPB.getContentPane().setLayout(framesimulacionPBLayout);
        framesimulacionPBLayout.setHorizontalGroup(
            framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framesimulacionPBLayout.createSequentialGroup()
                .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(framesimulacionPBLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tituloPB, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, framesimulacionPBLayout.createSequentialGroup()
                            .addGap(523, 523, 523)
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1414, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, framesimulacionPBLayout.createSequentialGroup()
                            .addGap(54, 54, 54)
                            .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel11)
                                .addComponent(jLabel12)
                                .addGroup(framesimulacionPBLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(617, 617, 617))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, framesimulacionPBLayout.createSequentialGroup()
                .addGap(0, 67, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2007, 2007, 2007))
        );
        framesimulacionPBLayout.setVerticalGroup(
            framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framesimulacionPBLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tituloPB)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jLabel12)
                .addGroup(framesimulacionPBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(framesimulacionPBLayout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(framesimulacionPBLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel10)))
                .addContainerGap(183, Short.MAX_VALUE))
        );

        framesimulacionPA.setTitle("EJECUCION");
        framesimulacionPA.setLocation(new java.awt.Point(100, 100));
        framesimulacionPA.setExtendedState(MAXIMIZED_BOTH);
        framesimulacionPB.setLocationRelativeTo(null);
        framesimulacionPA.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                framesimulacionPAWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        tituloPA.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        tituloPA.setText("SIMULACION PRIORIDAD ALTA");

        tablasimulacionPA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tablasimulacionPA);

        log1.setColumns(20);
        log1.setRows(5);
        jScrollPane8.setViewportView(log1);

        jLabel16.setText("LOG:");

        jLabel17.setText("MEMORIA PRINCIPAL ");

        jLabel18.setText(" MEMORIA VIRTUAL ");

        tablarecursossistemaPA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TECLADO", "RATON", "MONITOR", "IMPRESORA", "PROCEDIMIENTO", "TIEMPO"
            }
        ));
        jScrollPane9.setViewportView(tablarecursossistemaPA);

        jLabel19.setText("Recursos en sistema ");

        tablamemoriaprincipalPA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MARCOS"
            }
        ));
        jScrollPane10.setViewportView(tablamemoriaprincipalPA);

        tablamemoriavirtualPA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MARCOS"
            }
        ));
        jScrollPane11.setViewportView(tablamemoriavirtualPA);

        javax.swing.GroupLayout framesimulacionPALayout = new javax.swing.GroupLayout(framesimulacionPA.getContentPane());
        framesimulacionPA.getContentPane().setLayout(framesimulacionPALayout);
        framesimulacionPALayout.setHorizontalGroup(
            framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framesimulacionPALayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(framesimulacionPALayout.createSequentialGroup()
                        .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tituloPA, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(framesimulacionPALayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 1086, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 926, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(204, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, framesimulacionPALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addGap(116, 116, 116)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
        );
        framesimulacionPALayout.setVerticalGroup(
            framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framesimulacionPALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tituloPA)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel17)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(framesimulacionPALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(framesimulacionPALayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel18)
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(framesimulacionPALayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel7.setText("Simulador de sistema operativo ");

        tablaProcesoslistos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id proceso", "nombre proceso ", "tama√±o proceso ", "estado proceso ", "recursos asignados ", "paginas", "prioridad", "alias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaProcesoslistos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1091, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel7)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(192, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout principalLayout = new javax.swing.GroupLayout(principal);
        principal.setLayout(principalLayout);
        principalLayout.setHorizontalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        principalLayout.setVerticalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(principal, java.awt.BorderLayout.CENTER);

        jMenu2.setText("Proceso ");

        jMenuItem1.setText("CREAR");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Simulacion ");

        jMenuItem2.setText("Comenzar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
              int cantidadprocesos = listaProcesos.size();
              proceso_id.setText(""+(cantidadprocesos));
              proceso_alias.setText("P"+(cantidadprocesos+1));
              proceso_nombre.setText("");
              proceso_tamano.setText("");
              dialogCrear.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //se debe crear un proceso y agregarlo a la lista de procesos 
        // pero se debe consultar por la cantidad de procesos que se han creado  
        int cantidadprocesos = listaProcesos.size();
        
        if (cantidadprocesos>(maxprocesos-1)) 
        {
            JOptionPane.showMessageDialog(null, "No se puede crear mas procesos");
        }
        else
        {
            //preguntar si el tama√±o del proceso es acorde a lo ajustado 
            
          if(Integer.parseInt(proceso_tamano.getText())>maxtamanoproceso)
          {
                JOptionPane.showMessageDialog(null, "El tama√±o rebaza , el tama√±o maximo permitido es : "+maxtamanoproceso);
                
          }
          else
          {      
                    
            ArrayList<Recurso> listarecursos= new ArrayList<Recurso>();
            
            if (radio_teclado.isSelected())
            {
                

                listarecursos.add(crearrecurso("TECLADO",true));
                
            }
            if (radio_raton.isSelected())
            {
               

                listarecursos.add(crearrecurso("RATON",true));
                
            }
            if (radio_impresora.isSelected())
            {
                
                listarecursos.add(crearrecurso("IMPRESORA",true));
                
            }
            if (radio_monitor.isSelected())
            {
               

                listarecursos.add(crearrecurso("MONITOR",true));
                
            }
            if (radio_procedimiento.isSelected())
            {
                

                listarecursos.add(crearrecurso("PROCEDIMIENTO",true));
                
            }
           
      
            
              Proceso proceso = new Proceso((cantidadprocesos),Integer.parseInt( proceso_tamano.getText()), proceso_nombre.getText(), "LISTO", listarecursos,proceso_alias.getText(),generateRandomColor(),generarpaginas(Integer.parseInt( proceso_tamano.getText())),prioridad.getSelectedIndex());
              
              listaProcesos.add(proceso);
              
              //mostra procesos creados 
              LimpiarTabla(tablaProcesoslistos);
              DefaultTableModel modelo = new DefaultTableModel();
              modelo=(DefaultTableModel) tablaProcesoslistos.getModel();
              tablaProcesoslistos.setModel(modelo);
              
              Object[] datos = new Object[tablaProcesoslistos.getColumnCount()];
              for (int i = 0; i < listaProcesos.size(); i++) 
              {
           
            
       
                    Proceso objproceso= (Proceso) listaProcesos.get(i); 

                    datos[0]=objproceso.getId();
                    datos[1]=objproceso.getNombre();
                    datos[2]=objproceso.getTamano();
                    datos[3]=objproceso.getEstado();
            
                
            
                    //llenado de recursos
                    String recursos = "";
                    for (int j = 0; j < objproceso.getListaRecursos().size(); j++)
                        recursos+=" "+objproceso.getListaRecursos().get(j).getNombre()+"\n";
   
            
                    datos[4]=recursos;
                    datos[5]=objproceso.getPaginas();
                    datos[6]=objproceso.getPrioridad();
                    datos[7]=objproceso.getAlias();
                    
                     modelo.addRow(datos);
               }//cierre for padre
              
              
              dialogCrear.setVisible(false);
        

             
         }//cierre max procesos     
             
        }      
            
            
            
          
        
 


            
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private void radio_ratonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_ratonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_ratonActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    
         
       ArrayList<Proceso> listaProcesoslistosPA =new ArrayList<Proceso>();
       ArrayList<Proceso> listaProcesoslistosPB =new ArrayList<Proceso>();
       //seleccionar si hay procesos con prioridad alta 
        for (int i = 0; i < listaProcesos.size(); i++)
        {
            if(listaProcesos.get(i).getPrioridad()==1)
                listaProcesoslistosPA.add((Proceso)listaProcesos.get(i));
            else
                 listaProcesoslistosPB.add((Proceso)listaProcesos.get(i));
        }
        
   
        if (listaProcesoslistosPA.size()>0)
           bloquecontrol(listaProcesoslistosPA,1);
        
        
        if(listaProcesoslistosPB.size()>0)
        bloquecontrol(listaProcesoslistosPB,2);
        
       
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void proceso_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proceso_idActionPerformed

    private void radio_procedimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_procedimientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_procedimientoActionPerformed

    private void framesimulacionPBWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_framesimulacionPBWindowGainedFocus
        // TODO add your handling code here:
    }//GEN-LAST:event_framesimulacionPBWindowGainedFocus

    private void proceso_aliasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso_aliasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proceso_aliasActionPerformed

    private void framesimulacionPAWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_framesimulacionPAWindowGainedFocus
        // TODO add your handling code here:
    }//GEN-LAST:event_framesimulacionPAWindowGainedFocus
    
     private void LimpiarTabla(JTable tabla  )
    {
       while(tabla.getRowCount()>0)//recorremos toda la fila 
       {
       ((DefaultTableModel) tabla.getModel()).removeRow(0); //y se remueven
       
               
       }
       
        try {
            DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
            int filas=tabla.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }  
    
  public boolean equalBuffers(StringBuffer sb1, StringBuffer sb2) 
  {
        
        int len = sb1.length();
        if (len != sb2.length()) {
            return false;
        }
        
        if (sb1 == sb2) {
            return true;
        }
        for (int i = 0; i < len; i++) {
             if (sb1.charAt(i) != sb2.charAt(i)) {
                  return false;
             }
        }
        return true;
    }
  
  public void bloquecontrol (ArrayList<Proceso> listanuevos,int prioridad)
  {
     
      
      //antes de ingresar al simulador (la ejecucion ya se cargaron los procesos todos ccomo listos )
      //ahora tras te cada ejecucion se debe reordenar los listos 
      
      //1 crear una columna de iteracion en la tabla de simulacion 
      //2.tomar el primero en la cola de listos  y enviarlo a ejecucion
      //2.1   cuando este ahi pedir recurso si  es que tiene solicitudes , 
                //si tiene recursos pedir recurso 
                //si ese recurso no esta ocupado asignar  
               // si ese recurso esta asignado - mirar si es el proceso es el  q lo tiene
      //2.2 se decide a donde ingresa si a listos o bloqueados (ultima posicion)
      //2.3 terminar proceso cuando acabe su tama√±o y enviarlos a la lista de terminados (en ejecucion )
      //3 se decide si hay algun proceso bloqueado  que pueda ingresar a listos  
     // 4 recorrer lista de bloqueados  y pintar en tabla 
      // 5 recorrer lista de listos y pintar en tabla 
      
      //el simulador trabajara mientras hayan procesos listos  y  no concuerde la cantidad de procesos 
      //creados desde el principio con los procesos terminados  en la cola 
      
      //agregar titulo a la simulacion 
      
       
       //se borrar todos los bloqueados y terminados 
       
       listaProcesoslistos.clear();
       listaProcesosbloqueados.clear();
       listaProcesosbloqueados.clear();
       listapaginasmemoriaprincipal.clear();
       listapaginasmemoriavirtual.clear();
       
       // se hace copia de los procesos nuevos para llevarlos a listos 
       listaProcesoslistos= listanuevos;
       
       
       //pintar los primeros procesos en la memoria 
    
      String msg,pri;
      if(prioridad==1)
      {
         msg= "PRIORIDAD ALTA EJECUTANDOSE";
         pri="PA";
      }
      else 
      {
          msg= "PRIORIDA BAJA EJECUTANDOSE";
          pri="PB";
      }    
      
                
     subirprocesosmemoriaprincipalnuevos(listaProcesoslistos,prioridad,tiempo);
     subirprocesosnuevosmemoriavirtual(listaProcesoslistos,prioridad,tiempo);
     
           
       
     
       
       
        this.columnas_simulacion=(listaProcesoslistos.size()+5);
        this.procesoscreados=listaProcesoslistos.size();
        
        String[] columnas = new String[(columnas_simulacion)];
        
        int x; 
        columnas[0]="Tiempo";
        for(x=1; x<=this.procesoscreados;x++)
        {
            columnas[x]="Nom: "+listaProcesos.get(x-1).getNombre()+" alias:"+listaProcesos.get(x-1).getAlias()+" Pag :"+listaProcesos.get(x-1).getPaginas();
           
        }
        
        columnas[x++]="LISTOS";
        columnas[x++]="EJECUCION";
        columnas[x++]="BLOQUEADOS";
        columnas[x++]="TERMINADOS";
        DefaultTableModel dtm= new DefaultTableModel(columnas,this.columnas_simulacion );
     
     if(prioridad==1)
     {
           tablasimulacionPA.setModel(dtm);
      
      framesimulacionPA.setVisible(true);
     }
     else
     {
     tablasimulacionPB.setModel(dtm);
      
      framesimulacionPB.setVisible(true);
     }    
     
   
    this.tiempo=0;   
    
     
       log.setText(log.getText()+"\n"
              +"se han creado satisfactoriamente columnas de tabla simulacion");
       
      if(prioridad==1)
       LimpiarTabla(tablasimulacionPA);
      else
          LimpiarTabla(tablasimulacionPB);
        //en la tabla 
        //rowindex --->  tiempo 
        //columnindex --> proceso.id+1
       
        
        //PRIMERO ENVIAR LOS PROCESOS QUE TENGAN PRIORIDAD ALTA 
     
        while( terminarontodoslosprocesos()==false && hayprocesoslistos() )     
      //   while(hayprocesoslistos())
         {
            
               
             log.setText(log.getText()+"\n"
              +"Ingreso a bucle de simulacion tiempo "+tiempo);
       
           // System.out.println("ingreso al simulador tiempo "+tiempo);
                       
            //1. crear fila 
            crearfila(tiempo,prioridad);
            //2. se ejecuta el que este en en la posicion 0  //primero en entrar primero en salir    
            //siempre se va a ejecutar un proceso 
            procesoenejecucion=listaProcesoslistos.get(0);
            
            ejecutarproceso(listaProcesoslistos.get(0),tiempo,prioridad);
            
            pintarrecursossitema(tiempo,prioridad);

            
            
            //4-5. pintar lista de bloqueados, terminados  y listos 
                
            String procesoslistos="",procesosterminados="",procesosbloqueados="";
            
            for (int i = 0; i < listaProcesoslistos.size(); i++)
            {
                procesoslistos+=","+listaProcesoslistos.get(i).alias;
                
                if(prioridad==1)
                 tablasimulacionPA.getModel().setValueAt("LISTO", tiempo, (listaProcesoslistos.get(i).id+1));
                               
                else    
                tablasimulacionPB.getModel().setValueAt("LISTO", tiempo, (listaProcesoslistos.get(i).id+1));
                             
                
            }
            
           //   for (int i = 0; i < listaProcesosbloqueados.size(); i++)
            //{
              //  procesoslistos+=","+listaProcesosbloqueados.get(i).alias;
                
                //tablasimulacion.getModel().setValueAt("BLOQUEADO", tiempo, (listaProcesosbloqueados.get(i).id+1));
                 
                
             //log.setText(log.getText()+"\n"
              //+listaProcesosbloqueados.get(i).alias);
      
                
                
            //}
              
              for (int i = 0; i < listaProcesosterminados.size() ; i++)
            {
                procesoslistos+=","+listaProcesosterminados.get(i).alias;
                
                tablasimulacionPB.getModel().setValueAt("BLOQUEADO", tiempo, (listaProcesosterminados.get(i).id+1));
                       
               
                
            }
            
              
              
             log.setText(log.getText()+"\n"
              +"+"+procesoslistos+"--"+procesosbloqueados+"--"+procesosterminados);
             
            if(prioridad==1)
            {
            
                int poslistos = (tablasimulacionPA.getColumnCount()-4);
            int postejecucion = (tablasimulacionPA.getColumnCount()-3);
            int posbloqueados = (tablasimulacionPA.getColumnCount()-2);
            int posterminados = (tablasimulacionPA.getColumnCount()-1);
            
            
            tablasimulacionPA.getModel().setValueAt(procesoslistos, tiempo, poslistos);
            tablasimulacionPA.getModel().setValueAt(procesosbloqueados, tiempo, posbloqueados);
            tablasimulacionPA.getModel().setValueAt(procesosterminados, tiempo, posterminados);
            
            
            //imprimir ejecutado
            
             tablasimulacionPA.getModel().setValueAt(procesoenejecucion.getAlias(), tiempo, postejecucion);
             tablasimulacionPA.getModel().setValueAt(procesoenejecucion.getAlias()+" PAG. DESCONTADAS :"+tamanoquitado, tiempo,procesoenejecucion.getId()+1);
                 
            } 
            else
            {
            int poslistos = (tablasimulacionPB.getColumnCount()-4);
            int postejecucion = (tablasimulacionPB.getColumnCount()-3);
            int posbloqueados = (tablasimulacionPB.getColumnCount()-2);
            int posterminados = (tablasimulacionPB.getColumnCount()-1);
            
            
            tablasimulacionPB.getModel().setValueAt(procesoslistos, tiempo, poslistos);
            tablasimulacionPB.getModel().setValueAt(procesosbloqueados, tiempo, posbloqueados);
            tablasimulacionPB.getModel().setValueAt(procesosterminados, tiempo, posterminados);
            
            
            //imprimir ejecutado
            
             tablasimulacionPB.getModel().setValueAt(procesoenejecucion.getAlias(), tiempo, postejecucion);
             tablasimulacionPB.getModel().setValueAt(procesoenejecucion.getAlias()+" "+tamanoquitado, tiempo,procesoenejecucion.getId()+1);
              
            } 
              
              
              
              
            
                    
            //3. decidir si hay que cambiar los bloqueados a listos 
            //
            
          
            
                  
            
            if(procesoenejecucionterminado)
            {
                //se lleva a lista de terminados   
                listaProcesoslistos.remove(listaProcesoslistos.size()-1);
                listaProcesosterminados.add(procesoenejecucion);
            }
            else
             procesoenejecucionterminado=false;
                    
            
           //add tiempo 
           tiempo++;
           
           
        }  
        
      
    
      
  }
  
  
 public void cargarmemoria(Proceso proceso,int prioridad)
 {
     //se tiene que ir a buscar cuantas paginas le han descontado 
     int paginasdescontadas = proceso.getPaginasdescontadas();
     int paginas= proceso.getPaginas();
     int paginassubidas = paginas-paginasdescontadas;
     
     
     
     
     
     
 
 } 
 
  public void subirprocesosmemoriaprincipalnuevos(ArrayList<Proceso> lista,int prioridad,int tiempo)
  {
      if(prioridad==1)
             LimpiarTabla(tablamemoriaprincipalPA);
      else
             LimpiarTabla(tablamemoriaprincipalPB);
          //crear for para pintar paginas en una lista 
          
          
    //pintar encabezado 
    
        String[] columnas = new String[(maxprocesos*conjuntoresidente)+1];
        
        int x; 
        columnas[0]="Tiempo";
        JOptionPane.showMessageDialog(null, columnas.length);
        for(x=1; x<columnas.length;x++)
        {
            columnas[x]=""+x;   
        }
                
      
        DefaultTableModel dtm= new DefaultTableModel(columnas,columnas.length+1 );
        
        
      if(prioridad==1)
           tablamemoriaprincipalPA.setModel(dtm);
      else
           tablamemoriaprincipalPB.setModel(dtm);
      
      
      for (int i = 0; i < lista.size(); i++)
      {
             for (int j = 0; j < conjuntoresidente; j++)
             {
              listapaginasmemoriaprincipal.add(lista.get(i).getAlias()+"-PAG:"+(j+1));
             }   
            
            
      }
      
      //COMPLETAR LAS PAGINAS 
      
      for (int i = listapaginasmemoriaprincipal.size(); i <= (maxprocesos*conjuntoresidente); i++) 
      {
          listapaginasmemoriaprincipal.add("VACIO");
          
      }
      //desordenar paginas 
      
      Collections.shuffle(listapaginasmemoriaprincipal);
              
      //pintar en table
      DefaultTableModel modelo = new DefaultTableModel();
      if(prioridad==1)
      {
          
        modelo=(DefaultTableModel) tablamemoriaprincipalPA.getModel();
        tablamemoriaprincipalPA.setModel(modelo);
          
      }
      else
      {
          modelo=(DefaultTableModel) tablamemoriaprincipalPB.getModel();
          tablamemoriaprincipalPB.setModel(modelo);
      }
      
      JOptionPane.showMessageDialog(null, tablamemoriaprincipalPB.getSelectedRowCount());
      Object[] datos = new Object[listapaginasmemoriaprincipal.size()];
      datos[0]=tiempo;
      for (int i = 1; i <listapaginasmemoriaprincipal.size(); i++) 
      {
           if(listapaginasmemoriaprincipal.get(i).equals("VACIO"))
                datos[i]="-";
           else
                datos[i]=listapaginasmemoriaprincipal.get(i);
           
           
      }
      modelo.addRow(datos);
     
      
      JOptionPane.showMessageDialog(null, tablamemoriaprincipalPB.getSelectedRowCount());
      
      
              
      
  }
  
  public void subirprocesosnuevosmemoriavirtual(ArrayList<Proceso> lista ,int prioridad,int tiempo)
  {
  
      if(prioridad==1)
      {
       LimpiarTabla(tablamemoriavirtualPA);
      }    
      else 
           LimpiarTabla(tablamemoriavirtualPB);
       //calcular cuantos espacios voy a tener 
      
      int cantpaginas=0;
      for (int i = 0; i < lista.size(); i++)
      { 
          if(lista.get(i).getPaginas()>conjuntoresidente)       
          cantpaginas+=(lista.get(i).getPaginas()-3);
      }
      
      
      String[] columnas = new String[cantpaginas+1];
        
        int x; 
        columnas[0]="Tiempo";
        for(x=1; x<columnas.length;x++)
        {
            columnas[x]=""+x;           
        }
                
        DefaultTableModel dtm= new DefaultTableModel(columnas,cantpaginas );
        
        
      if(prioridad==1)
           tablamemoriavirtualPA.setModel(dtm);
      else
           tablamemoriavirtualPB.setModel(dtm);
      
      
      
      //crear for para pintar paginas en una lista 
      
      for (int i = 0; i < lista.size(); i++)
      {
             for (int j = conjuntoresidente+1; j < lista.get(i).getPaginas(); j++)
             {
              listapaginasmemoriavirtual.add(lista.get(i).getAlias()+"-PAG:"+j);
             }   
            
            
      }
      
     
      
      
      
      //desordenar paginas 
      
      Collections.shuffle(listapaginasmemoriavirtual);
              
      //pintar en table
      
      DefaultTableModel modelo = new DefaultTableModel();
      if(prioridad==1)
      {
            modelo=(DefaultTableModel) tablamemoriavirtualPA.getModel();
            tablamemoriavirtualPA.setModel(modelo);
      }
      else
      {
            modelo=(DefaultTableModel) tablamemoriavirtualPB.getModel();
            tablamemoriavirtualPB.setModel(modelo);   
      }
      
      if (listapaginasmemoriavirtual.size()>0)
      {
       
          
      Object[] datos = new Object[listapaginasmemoriavirtual.size()];
      datos[0]=tiempo;
            
      JOptionPane.showMessageDialog(null,listapaginasmemoriavirtual.size());
      for (int i = 1; i <listapaginasmemoriavirtual.size(); i++) 
      {
          datos[i]=listapaginasmemoriavirtual.get(i);
          
      }
       modelo.addRow(datos);
              
      
      }
  
  
  }
  public int generarpaginas(int tam_proceso)
  {
     
      int d ;
      
      if (tam_proceso%this.marco==0) 
      {
          
         d= tam_proceso/this.marco;
      }
      else 
           d = (tam_proceso/this.marco)+1;
              
      
      return d;
  }
  public void crearfila(int tiempo ,int prioridad)
  {
           
       DefaultTableModel model = new DefaultTableModel();
       if(prioridad==1)
       {
           
             model =(DefaultTableModel) tablasimulacionPA.getModel();
             tablasimulacionPA.setModel(model);
       }
       else
       {
           
       model =(DefaultTableModel) tablasimulacionPB.getModel();
       tablasimulacionPB.setModel(model);
       }
       
       String[] datos = new String[columnas_simulacion];
       
       datos[0]=""+tiempo;
       
       for (int count = 1; count <columnas_simulacion; count++) 
       {
          
            datos[count]="";
             System.out.println(""+datos[count]);
       }
       
       model.addRow(datos);
                        
            
            
            
  }
  
  
  
  
  
  
  public void ejecutarproceso(Proceso proceso,int tiempo,int prioridad)
  { 
      log.setText(log.getText()+"\n"
              +"ejecucion de proceso : "+proceso.getAlias());
      
      //si tiene recursos que no ha tomado -- pedir recurso (iterar )
      //si ese recurso no esta ocupado asignar ---- y salir bien (descontar tama√±o y cambiar memoria )
      // si ese recurso esta asignado - mirar si es el proceso el q lo tiene
      // 
     
       if(tienerecursosasolicitar(proceso))
       {
          //Como tiene recursos pedirlos si en el sistema estan libres los recursos utilizarlos 
           //sino bloquear proceso 
           
            log.setText(log.getText()+"\n"
              +"tiene recusos creados  : "+proceso.getAlias());
           
           proceso.setListaRecursos(tomotodoslosrecursos(proceso.getListaRecursos()));
         
           bucle1:
           for (int i = 0; i < proceso.getListaRecursos().size(); i++)
           {
               Recurso recursosolicitar = proceso.getListaRecursos().get(i);
               //recorrer recursos en el sistema para mirar si esta tomado 
               JOptionPane.showMessageDialog(null,"Recurso solicitado "+recursosolicitar.getNombre()+"tiempo "+tiempo+"i "+i);
               
               
               for (int j = 0; j < listarecursosensistema.size(); j++) 
               {
                   
                    
                    String x= (String)recursosolicitar.getNombre();
                    String y =(String)listarecursosensistema.get(j).getNombre();
                    
                    JOptionPane.showMessageDialog(null,"x"+x+ ", y"+y );
                    
                   if(comparar(x,y))
                   {
                    
                    
                       
                       Recurso recursosistema= listarecursosensistema.get(j);
                       
                      
                       if(recursosistema.isLibarado())
                       {
                           
                       JOptionPane.showMessageDialog(null,"el recurso solicitado esta liberado");
                       
                            log.setText(log.getText()+"\n"
              +"el recurso solicitado esta liberado    : "+proceso.getAlias());
                           //osea que se puede pedir 
                           //pero mirar si ya lo tomo para pedir otro recurso 
                           //pero decidir si lo libera 
                           if(recursosolicitar.Ya_se_ha_tomado())
                           {
                              recursosolicitar.liberarrecurso();
                              proceso.getListaRecursos().set(i, recursosolicitar);
                           }
                           else
                           {
                               //tomar recurso 
                               
                                log.setText(log.getText()+"\n"
              +"tomar recuso se encuentra liberado   : "+proceso.getAlias());
                               
                               
                               //se tiene que cambiar estado en la lista de los recursos del sistema 
                               recursosistema.setLibarado(false);
                               listarecursosensistema.set(j, recursosistema);
                               
                               recursosolicitar.setLibarado(false);
                               recursosolicitar.setYa_se_ha_tomado(true);
                               proceso.getListaRecursos().set(i, recursosolicitar);
                               
                               
                               cargarmemoria(proceso,prioridad);
                               finalizarejecucionlisto(proceso,tiempo);
                               //break bucle1;
                               
                           
                           }    
                       
                       }        
                       else
                       {
                          //queda bloqueado por que pidio recurso y no esta disponible
                           
                           //pero si el tiene la variable ya ha sido tomado en true es por q el es el que lo tiene decidir 
                           //si lo libera 
                           
                           JOptionPane.showMessageDialog(null, "NO esta liberado");
                           if(proceso.getListaRecursos().get(i).Ya_se_ha_tomado())
                           {
                               JOptionPane.showMessageDialog(null, "recurso lo tiene liberar?");
                                recursosolicitar.liberarrecurso();
                                proceso.getListaRecursos().set(i, recursosolicitar);
                                     log.setText(log.getText()+"\n"
              +"el recurso solicitado esta asignado decidir si liberar    : "+proceso.getAlias());
                           }
                           else
                           {
                               JOptionPane.showMessageDialog(null, "recurso no lo tiene");
                               finalizarejecucionbloqueado(proceso, tiempo);
                               break bucle1;
                           }    
                           
                           
                           
                       }
                   }
                           
                   
               }//for lista recursos sistema
               
           }//for lista de recursos a pedir 
       }
       else//si no tiene recursos solo quitar tama√±o y organizar memoria 
       {
           finalizarejecucionlisto(proceso,tiempo);
       }    
     
       
       this.procesoenejecucion= proceso;
  
  }
  
  public static boolean comparar(String predeterminada, String entrada)
  {
     //variable usada para verificar si las palabras son iguales
    String aux="";

    //se verifica que ambas palabras tengan la misma longitud
    //si no es asi no se pueden comparar
    if(predeterminada.length()==entrada.length())
    {

        for(int i=0;i<predeterminada.length();i++){

            //verificamos si el primer caracter de predeterminada
            //es igual al primero de entrada
           if(predeterminada.charAt(i)==entrada.charAt(i)){
               //si es asi guardamos ese concatenamos el caracter a la variable aux
               aux+=predeterminada.charAt(i);
           }
        }
        if(aux.equals(predeterminada)){
           return  true;
        }else{
            return false;
        }



    }else{
        
return false;
    }

}
  
  public ArrayList<Recurso> tomotodoslosrecursos(ArrayList<Recurso> lista)
  {
      
      ArrayList<Recurso> listadevolver=lista;
      int contador=-1;
      for (int i = 0; i < lista.size(); i++) 
      {   
          if(lista.get(i).Ya_se_ha_tomado())
          {
              if(contador==-1)
                 contador=0;
                  
              contador++;
          }    
              
          
      }
          
      if(contador==lista.size())
      {
           log.setText(log.getText()+"\n"
              +"Ya tomo todos los recursos , volver a pedir todos  : ");
          // volver a decir q no los ha tomado para hacer la solicitud 
          for (int i = 0; i < lista.size(); i++) 
          {
              lista.get(i).setYa_se_ha_tomado(false);
                       
          }
          
          listadevolver=lista;
           
      }
      
      return listadevolver;
      
  }  
  public Recurso buscarrecusoensistema(ArrayList<Recurso> lista,String nombre)
  {
      
       String n = nombre;
       Iterator it = lista.iterator();
       Recurso r= new Recurso();
       
       while(it.hasNext()) 
       {
       
           Recurso  objeto = new Recurso();
           objeto= (Recurso) it.next();
         
           if(objeto.getNombre().equals(n))        
             r= objeto;      
                
        }
       return r;
  }        
  public void finalizarejecucionlisto(Proceso proceso,int tiempo)
  {
       log.setText(log.getText()+"\n"
              +"ejecucion de proceso llevado a listo  : "+proceso.getAlias());
      //quitar tama√±o de paginas 
      // enviar proceso a cola de listos , sacarlo de la pocicion 0 
      //decidir si esta terminado
      
      int tamanoproceso=proceso.getPaginasdescontadas();
      tamanoquitado=0;
      
      if(tamanoproceso<conjuntoresidente)
        tamanoquitado= tamanoproceso-tamanoproceso;
      else
         tamanoquitado = tamanoproceso-conjuntoresidente;
      
      proceso.setPaginasdescontadas(tamanoquitado);
      
      if(proceso.getPaginasdescontadas()==0)
          this.procesoenejecucionterminado=true;
      else
          this.procesoenejecucionterminado=false;
      
      
      
      
      
      log.setText(log.getText()+"\n"
              +"proceso tama√±o "+tamanoproceso+"  con nuevo tama√±o  : "+proceso.getTamano());
      
      ArrayList<Proceso> lista = new ArrayList<>();
      int i;
      for ( i= 0; i < listaProcesoslistos.size()-1; i++)
      {
          lista.add(listaProcesoslistos.get(i+1));
          
      }
      
      lista.add(proceso);
      listaProcesoslistos=lista;  
      
      
      
      this.procesoenejecucion= proceso;     
      
  }        
  
   public void finalizarejecucionbloqueado(Proceso proceso,int tiempo)
  {
      
       log.setText(log.getText()+"\n"
              +"ejecucion de proceso llevado a bloqueado   : "+proceso.getAlias());
    
      // enviar proceso a cola de bloqueados  
      // y sacarlo de los listos 
      
      
      listaProcesoslistos.remove(0);   
      listaProcesosbloqueados.add(proceso);
      
      this.procesoenejecucion= proceso;      
 } 
  public boolean tienerecursosasolicitar(Proceso proceso)
  {
       boolean respuesta= false;
      // en esta simplemente se consulta si la lista tiene objetos 
     
      if( !proceso.getListaRecursos().isEmpty())
      {
           respuesta=true;
      }   
        
      
      return respuesta;
      
      
  }        
  public boolean terminarontodoslosprocesos()
  {
      // se hacen con la lista creada desde un principio
      
      int cantidad_creada=listaProcesos.size();

    
   log.setText(log.getText()+"\n"
              +"Validacion <<terminaron todos los procesos>> : "+"cantidad procesos creados  "+cantidad_creada+" size terminados "+listaProcesosterminados.size());
      boolean respuesta= false;
      
      if(cantidad_creada==listaProcesosterminados.size())    
          respuesta=true;
      
      return respuesta;
  }
  
   public boolean hayprocesoslistos()
  {
      
      boolean respuesta= false;
      // en esta simplemente se consulta si la lista tiene objetos 
     
      
      if( !listaProcesoslistos.isEmpty())
        respuesta=true;
      
      return respuesta;
  
  }
  
  
   public void  pintarrecursossitema(int tiempo,int prioridad)
   {
              DefaultTableModel modelo = new DefaultTableModel();
              if(prioridad==1)
              {
                  
              modelo=(DefaultTableModel) tablarecursossistemaPA.getModel();
              tablarecursossistemaPA.setModel(modelo);
              }    
              else
              {
                modelo=(DefaultTableModel) tablarecursossistemaPB.getModel();
              tablarecursossistemaPB.setModel(modelo);
              }
                  
              
              String[] datos = new String[6];
       
      
       
       for (int count = 0; count <listarecursosensistema.size(); count++) 
       {
          
             if(!listarecursosensistema.get(count).isLibarado())
             {
                
                 
                //YA ALGUN PROCESO LO TOMO BUSCAR PROCESO   EN LOS LISTOS
                 for (int i = 0; i < listaProcesoslistos.size(); i++) 
                 {
                     
                     String x=listarecursosensistema.get(count).getNombre();
                     
                     
                     // en cada proceso recorrer sus recursos 
                     
                     
                     
                     for (int j = 0; j < listaProcesoslistos.get(i).getListaRecursos().size(); j++) 
                     {
                         String y = listaProcesoslistos.get(i).getListaRecursos().get(j).getNombre();
                         if(comparar(x, y))
                         {
                            
                             JOptionPane.showMessageDialog(null, listaProcesoslistos.get(i).getListaRecursos().get(j).getNombre()+"--"+listaProcesoslistos.get(i).getListaRecursos().get(j).libarado+"--"+listaProcesoslistos.get(i).getListaRecursos().get(j).ya_se_ha_tomado);
                            
                             if (!listaProcesoslistos.get(i).getListaRecursos().get(j).libarado  )
                             {
                                  datos[count]=""+listaProcesoslistos.get(i).getAlias();
                             }
                                     
                              
                         }
                     }
                     
                     
                     
                 }
                 
             }
             else
             datos[count]="LIBRE";
             
             
            
             
       }
       
        datos[5]=""+tiempo;
       modelo.addRow(datos);
              
         
   }
          
     
     
   
   public Recurso crearrecurso(String nombre,boolean liberado)
   {
       
       // el ultimo parametro es si ya se ha tomado como hasta hora se crea pues no se ha tomado 
       Recurso recurso = new Recurso(nombre,liberado,false);
      
       return recurso;
   }  
   
   private static String generateRandomColor()
   {
	String[] letters = {"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"};
	String color = "#";
	for (int i = 0; i < 6; i++ ) {
	    color += letters[(int) Math.round(Math.random() * 15)];
	}
	return color;
   }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JDialog dialogCrear;
    private javax.swing.JFrame framesimulacionPA;
    private javax.swing.JFrame framesimulacionPB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea log;
    private javax.swing.JTextArea log1;
    private javax.swing.JPanel principal;
    private javax.swing.JComboBox<String> prioridad;
    private javax.swing.JTextField proceso_alias;
    private javax.swing.JTextField proceso_id;
    private javax.swing.JTextField proceso_nombre;
    private javax.swing.JTextField proceso_tamano;
    private javax.swing.JRadioButton radio_impresora;
    private javax.swing.JRadioButton radio_monitor;
    private javax.swing.JRadioButton radio_procedimiento;
    private javax.swing.JRadioButton radio_raton;
    private javax.swing.JRadioButton radio_teclado;
    public javax.swing.JTable tablaProcesoslistos;
    private javax.swing.JTable tablamemoriaprincipalPA;
    private javax.swing.JTable tablamemoriaprincipalPB;
    private javax.swing.JTable tablamemoriavirtualPA;
    private javax.swing.JTable tablamemoriavirtualPB;
    private javax.swing.JTable tablarecursossistemaPA;
    private javax.swing.JTable tablarecursossistemaPB;
    private javax.swing.JTable tablasimulacionPA;
    private javax.swing.JTable tablasimulacionPB;
    private javax.swing.JLabel tituloPA;
    private javax.swing.JLabel tituloPB;
    // End of variables declaration//GEN-END:variables
}
